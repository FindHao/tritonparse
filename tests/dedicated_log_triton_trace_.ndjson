{"event_type":"compilation","pid":621033,"stack":[{"line":69,"name":"<module>","filename":"/home/yhao/tritonparse/tests/test_add.py","loc":"test_tensor_add()"},{"line":57,"name":"test_tensor_add","filename":"/home/yhao/tritonparse/tests/test_add.py","loc":"c_triton = tensor_add(a, b)"},{"line":42,"name":"tensor_add","filename":"/home/yhao/tritonparse/tests/test_add.py","loc":"add_kernel[grid](a, b, c, n_elements, BLOCK_SIZE)"},{"line":374,"name":"<lambda>","filename":"/home/yhao/p9b/triton/python/triton/runtime/jit.py","loc":"return lambda *args, **kwargs: self.run(grid=grid, warmup=False, *args, **kwargs)"},{"line":610,"name":"run","filename":"/home/yhao/p9b/triton/python/triton/runtime/jit.py","loc":"kernel = self.compile(src, target=target, options=options.__dict__)"},{"line":385,"name":"compile","filename":"/home/yhao/p9b/triton/python/triton/compiler/compiler.py","loc":"compilation_listener(src=src, metadata=metadata, metadata_group=metadata_group, times=timer.end(),"},{"line":547,"name":"maybe_trace_triton","filename":"/home/yhao/tritonparse/tritonparse/structured_logging.py","loc":"trace_structured_triton("},{"line":467,"name":"trace_structured_triton","filename":"/home/yhao/tritonparse/tritonparse/structured_logging.py","loc":"metadata_dict[\"stack\"] = get_stack_trace()"}],"timestamp":"2025-05-09T13:29:44.%fZ","payload":{"metadata":{"cache_hit":false,"hash":"686bd3a8d1c50f213c66a6b8352b9eee5dc9cbca74aca2e6f199d621e7853199","target":{"backend":"cuda","arch":90,"warp_size":32},"num_warps":4,"num_ctas":1,"num_stages":3,"maxnreg":null,"cluster_dims":[1,1,1],"ptx_version":null,"enable_fp_fusion":true,"launch_cooperative_grid":false,"launch_pdl":false,"supported_fp8_dtypes":["fp8e4b15","fp8e4nv","fp8e5"],"deprecated_fp8_dtypes":["fp8e4b15"],"default_dot_input_precision":"tf32","allowed_dot_input_precisions":["tf32","tf32x3","ieee"],"max_num_imprecise_acc_default":1073741824,"extern_libs":[["libdevice","/home/yhao/p9b/triton/python/triton/backends/nvidia/lib/libdevice.10.bc"]],"debug":false,"backend_name":"cuda","sanitize_overflow":true,"arch":"sm90","triton_version":"3.3.0","tensordesc_meta":[],"shared":0,"tmem_size":0,"global_scratch_size":0,"global_scratch_align":1,"name":"add_kernel"},"file_path":{"add_kernel.ttir":"/home/yhao/.triton/cache/NBV5HKGRYUHSCPDGU24DKK465ZO4TS6KOSWKFZXRTHLCDZ4FGGMQ/add_kernel.ttir","add_kernel.ttgir":"/home/yhao/.triton/cache/NBV5HKGRYUHSCPDGU24DKK465ZO4TS6KOSWKFZXRTHLCDZ4FGGMQ/add_kernel.ttgir","add_kernel.llir":"/home/yhao/.triton/cache/NBV5HKGRYUHSCPDGU24DKK465ZO4TS6KOSWKFZXRTHLCDZ4FGGMQ/add_kernel.llir","add_kernel.ptx":"/home/yhao/.triton/cache/NBV5HKGRYUHSCPDGU24DKK465ZO4TS6KOSWKFZXRTHLCDZ4FGGMQ/add_kernel.ptx","add_kernel.cubin":"/home/yhao/.triton/cache/NBV5HKGRYUHSCPDGU24DKK465ZO4TS6KOSWKFZXRTHLCDZ4FGGMQ/add_kernel.cubin","add_kernel.json":"/home/yhao/.triton/cache/NBV5HKGRYUHSCPDGU24DKK465ZO4TS6KOSWKFZXRTHLCDZ4FGGMQ/add_kernel.json"},"file_content":{"add_kernel.ttir":"#loc = loc(\"/home/yhao/tritonparse/tests/test_add.py\":19:0)\nmodule {\n  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc(\"/home/yhao/tritonparse/tests/test_add.py\":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc(\"/home/yhao/tritonparse/tests/test_add.py\":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc(\"/home/yhao/tritonparse/tests/test_add.py\":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc(\"/home/yhao/tritonparse/tests/test_add.py\":19:0)) attributes {noinline = false} {\n    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)\n    %0 = tt.get_program_id x : i32 loc(#loc2)\n    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)\n    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)\n    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)\n    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)\n    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32> loc(#loc6)\n    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32> loc(#loc6)\n    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc7)\n    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc7)\n    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc8)\n    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc9)\n    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc9)\n    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc10)\n    %13 = arith.addf %9, %12 : tensor<1024xf32> loc(#loc11)\n    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc12)\n    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc12)\n    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>> loc(#loc13)\n    tt.return loc(#loc14)\n  } loc(#loc)\n} loc(#loc)\n#loc1 = loc(unknown)\n#loc2 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":26:24)\n#loc3 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":27:24)\n#loc4 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":28:41)\n#loc5 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":28:28)\n#loc6 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":29:21)\n#loc7 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":31:24)\n#loc8 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":31:16)\n#loc9 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":32:24)\n#loc10 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":32:16)\n#loc11 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":33:12)\n#loc12 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":34:21)\n#loc13 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":34:30)\n#loc14 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":34:4)\n","add_kernel.ttgir":"#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n#loc = loc(\"/home/yhao/tritonparse/tests/test_add.py\":19:0)\nmodule attributes {\"ttg.num-ctas\" = 1 : i32, \"ttg.num-warps\" = 4 : i32, ttg.target = \"cuda:90\", \"ttg.threads-per-warp\" = 32 : i32} {\n  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc(\"/home/yhao/tritonparse/tests/test_add.py\":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc(\"/home/yhao/tritonparse/tests/test_add.py\":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc(\"/home/yhao/tritonparse/tests/test_add.py\":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc(\"/home/yhao/tritonparse/tests/test_add.py\":19:0)) attributes {noinline = false} {\n    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)\n    %0 = tt.get_program_id x : i32 loc(#loc2)\n    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)\n    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)\n    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)\n    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)\n    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)\n    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)\n    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)\n    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)\n    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)\n    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)\n    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)\n    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc10)\n    %13 = arith.addf %9, %12 : tensor<1024xf32, #blocked> loc(#loc11)\n    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)\n    %15 = tt.addptr %14, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)\n    tt.store %15, %13, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)\n    tt.return loc(#loc14)\n  } loc(#loc)\n} loc(#loc)\n#loc1 = loc(unknown)\n#loc2 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":26:24)\n#loc3 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":27:24)\n#loc4 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":28:41)\n#loc5 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":28:28)\n#loc6 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":29:21)\n#loc7 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":31:24)\n#loc8 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":31:16)\n#loc9 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":32:24)\n#loc10 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":32:16)\n#loc11 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":33:12)\n#loc12 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":34:21)\n#loc13 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":34:30)\n#loc14 = loc(\"/home/yhao/tritonparse/tests/test_add.py\":34:4)\n","add_kernel.llir":"; ModuleID = 'LLVMDialectModule'\nsource_filename = \"LLVMDialectModule\"\ntarget datalayout = \"e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64\"\n\ndefine ptx_kernel void @add_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {\n  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8\n  %7 = shl i32 %6, 10, !dbg !9\n  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10\n  %9 = shl i32 %8, 2, !dbg !10\n  %10 = and i32 %9, 508, !dbg !10\n  %11 = or disjoint i32 %10, %7, !dbg !11\n  %12 = or disjoint i32 %11, 512, !dbg !11\n  %13 = icmp slt i32 %11, %3, !dbg !12\n  %14 = icmp slt i32 %12, %3, !dbg !12\n  %15 = sext i32 %11 to i64, !dbg !13\n  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !13\n  %17 = sext i32 %12 to i64, !dbg !13\n  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !13\n  %19 = tail call { i32, i32, i32, i32 } asm sideeffect \"mov.u32 $0, 0x0;\\0A\\09mov.u32 $1, 0x0;\\0A\\09mov.u32 $2, 0x0;\\0A\\09mov.u32 $3, 0x0;\\0A\\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\", \"=r,=r,=r,=r,l,b\"(ptr addrspace(1) %16, i1 %13) #2, !dbg !14\n  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !14\n  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !14\n  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !14\n  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !14\n  %24 = bitcast i32 %20 to float, !dbg !14\n  %25 = bitcast i32 %21 to float, !dbg !14\n  %26 = bitcast i32 %22 to float, !dbg !14\n  %27 = bitcast i32 %23 to float, !dbg !14\n  %28 = tail call { i32, i32, i32, i32 } asm sideeffect \"mov.u32 $0, 0x0;\\0A\\09mov.u32 $1, 0x0;\\0A\\09mov.u32 $2, 0x0;\\0A\\09mov.u32 $3, 0x0;\\0A\\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\", \"=r,=r,=r,=r,l,b\"(ptr addrspace(1) %18, i1 %14) #2, !dbg !14\n  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !14\n  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !14\n  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !14\n  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !14\n  %33 = bitcast i32 %29 to float, !dbg !14\n  %34 = bitcast i32 %30 to float, !dbg !14\n  %35 = bitcast i32 %31 to float, !dbg !14\n  %36 = bitcast i32 %32 to float, !dbg !14\n  %37 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !15\n  %38 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !15\n  %39 = tail call { i32, i32, i32, i32 } asm sideeffect \"mov.u32 $0, 0x0;\\0A\\09mov.u32 $1, 0x0;\\0A\\09mov.u32 $2, 0x0;\\0A\\09mov.u32 $3, 0x0;\\0A\\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\", \"=r,=r,=r,=r,l,b\"(ptr addrspace(1) %37, i1 %13) #2, !dbg !16\n  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !16\n  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !16\n  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !16\n  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !16\n  %44 = bitcast i32 %40 to float, !dbg !16\n  %45 = bitcast i32 %41 to float, !dbg !16\n  %46 = bitcast i32 %42 to float, !dbg !16\n  %47 = bitcast i32 %43 to float, !dbg !16\n  %48 = tail call { i32, i32, i32, i32 } asm sideeffect \"mov.u32 $0, 0x0;\\0A\\09mov.u32 $1, 0x0;\\0A\\09mov.u32 $2, 0x0;\\0A\\09mov.u32 $3, 0x0;\\0A\\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\", \"=r,=r,=r,=r,l,b\"(ptr addrspace(1) %38, i1 %14) #2, !dbg !16\n  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !16\n  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !16\n  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !16\n  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !16\n  %53 = bitcast i32 %49 to float, !dbg !16\n  %54 = bitcast i32 %50 to float, !dbg !16\n  %55 = bitcast i32 %51 to float, !dbg !16\n  %56 = bitcast i32 %52 to float, !dbg !16\n  %57 = fadd float %24, %44, !dbg !17\n  %58 = fadd float %25, %45, !dbg !17\n  %59 = fadd float %26, %46, !dbg !17\n  %60 = fadd float %27, %47, !dbg !17\n  %61 = fadd float %33, %53, !dbg !17\n  %62 = fadd float %34, %54, !dbg !17\n  %63 = fadd float %35, %55, !dbg !17\n  %64 = fadd float %36, %56, !dbg !17\n  %65 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !18\n  %66 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !18\n  %67 = bitcast float %57 to i32, !dbg !19\n  %68 = bitcast float %58 to i32, !dbg !19\n  %69 = bitcast float %59 to i32, !dbg !19\n  %70 = bitcast float %60 to i32, !dbg !19\n  tail call void asm sideeffect \"@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };\", \"r,r,r,r,l,b\"(i32 %67, i32 %68, i32 %69, i32 %70, ptr addrspace(1) %65, i1 %13) #2, !dbg !19\n  %71 = bitcast float %61 to i32, !dbg !19\n  %72 = bitcast float %62 to i32, !dbg !19\n  %73 = bitcast float %63 to i32, !dbg !19\n  %74 = bitcast float %64 to i32, !dbg !19\n  tail call void asm sideeffect \"@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };\", \"r,r,r,r,l,b\"(i32 %71, i32 %72, i32 %73, i32 %74, ptr addrspace(1) %66, i1 %14) #2, !dbg !19\n  ret void, !dbg !20\n}\n\n; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1\n\n; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1\n\nattributes #0 = { \"nvvm.reqntid\"=\"128\" }\nattributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }\nattributes #2 = { nounwind }\n\n!llvm.dbg.cu = !{!0}\n!llvm.module.flags = !{!2, !3}\n!llvm.ident = !{!4}\n\n!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: \"triton\", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)\n!1 = !DIFile(filename: \"test_add.py\", directory: \"/home/yhao/tritonparse/tests\")\n!2 = !{i32 2, !\"Debug Info Version\", i32 3}\n!3 = !{i32 4, !\"nvvm-reflect-ftz\", i32 1}\n!4 = !{!\"clang version 3.8.0 (tags/RELEASE_380/final)\"}\n!5 = distinct !DISubprogram(name: \"add_kernel\", linkageName: \"add_kernel\", scope: !1, file: !1, line: 19, type: !6, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)\n!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)\n!7 = !{}\n!8 = !DILocation(line: 26, column: 24, scope: !5)\n!9 = !DILocation(line: 27, column: 24, scope: !5)\n!10 = !DILocation(line: 28, column: 41, scope: !5)\n!11 = !DILocation(line: 28, column: 28, scope: !5)\n!12 = !DILocation(line: 29, column: 21, scope: !5)\n!13 = !DILocation(line: 31, column: 24, scope: !5)\n!14 = !DILocation(line: 31, column: 16, scope: !5)\n!15 = !DILocation(line: 32, column: 24, scope: !5)\n!16 = !DILocation(line: 32, column: 16, scope: !5)\n!17 = !DILocation(line: 33, column: 12, scope: !5)\n!18 = !DILocation(line: 34, column: 21, scope: !5)\n!19 = !DILocation(line: 34, column: 30, scope: !5)\n!20 = !DILocation(line: 34, column: 4, scope: !5)\n","add_kernel.ptx":"//\n// Generated by LLVM NVPTX Back-End\n//\n\n.version 8.7\n.target sm_90a\n.address_size 64\n\n\t// .globl\tadd_kernel              // -- Begin function add_kernel\n                                        // @add_kernel\n.visible .entry add_kernel(\n\t.param .u64 .ptr .global .align 1 add_kernel_param_0,\n\t.param .u64 .ptr .global .align 1 add_kernel_param_1,\n\t.param .u64 .ptr .global .align 1 add_kernel_param_2,\n\t.param .u32 add_kernel_param_3,\n\t.param .u64 .ptr .global .align 1 add_kernel_param_4\n)\n.reqntid 128\n{\n\t.reg .pred \t%p<7>;\n\t.reg .b32 \t%r<33>;\n\t.reg .f32 \t%f<25>;\n\t.reg .b64 \t%rd<11>;\n\t.loc\t1 19 0                          // test_add.py:19:0\n$L__func_begin0:\n\t.loc\t1 19 0                          // test_add.py:19:0\n\n// %bb.0:\n\tld.param.u64 \t%rd7, [add_kernel_param_0];\n\tld.param.u64 \t%rd8, [add_kernel_param_1];\n$L__tmp0:\n\t.loc\t1 26 24                         // test_add.py:26:24\n\tmov.u32 \t%r25, %ctaid.x;\n\t.loc\t1 27 24                         // test_add.py:27:24\n\tshl.b32 \t%r26, %r25, 10;\n\tld.param.u64 \t%rd9, [add_kernel_param_2];\n\tld.param.u32 \t%r27, [add_kernel_param_3];\n\t.loc\t1 28 41                         // test_add.py:28:41\n\tmov.u32 \t%r28, %tid.x;\n\tshl.b32 \t%r29, %r28, 2;\n\tand.b32  \t%r30, %r29, 508;\n\t.loc\t1 28 28                         // test_add.py:28:28\n\tor.b32  \t%r31, %r30, %r26;\n\tor.b32  \t%r32, %r31, 512;\n\t.loc\t1 29 21                         // test_add.py:29:21\n\tsetp.lt.s32 \t%p1, %r31, %r27;\n\tsetp.lt.s32 \t%p2, %r32, %r27;\n\t.loc\t1 31 24                         // test_add.py:31:24\n\tmul.wide.s32 \t%rd10, %r31, 4;\n\tadd.s64 \t%rd1, %rd7, %rd10;\n\tadd.s64 \t%rd2, %rd1, 2048;\n\t.loc\t1 31 16                         // test_add.py:31:16\n\t// begin inline asm\n\tmov.u32 %r1, 0x0;\n\tmov.u32 %r2, 0x0;\n\tmov.u32 %r3, 0x0;\n\tmov.u32 %r4, 0x0;\n\t@%p1 ld.global.v4.b32 { %r1, %r2, %r3, %r4 }, [ %rd1 + 0 ];\n\t// end inline asm\n\tmov.b32 \t%f1, %r1;\n\tmov.b32 \t%f2, %r2;\n\tmov.b32 \t%f3, %r3;\n\tmov.b32 \t%f4, %r4;\n\t// begin inline asm\n\tmov.u32 %r5, 0x0;\n\tmov.u32 %r6, 0x0;\n\tmov.u32 %r7, 0x0;\n\tmov.u32 %r8, 0x0;\n\t@%p2 ld.global.v4.b32 { %r5, %r6, %r7, %r8 }, [ %rd2 + 0 ];\n\t// end inline asm\n\tmov.b32 \t%f5, %r5;\n\tmov.b32 \t%f6, %r6;\n\tmov.b32 \t%f7, %r7;\n\tmov.b32 \t%f8, %r8;\n\t.loc\t1 32 24                         // test_add.py:32:24\n\tadd.s64 \t%rd3, %rd8, %rd10;\n\tadd.s64 \t%rd4, %rd3, 2048;\n\t.loc\t1 32 16                         // test_add.py:32:16\n\t// begin inline asm\n\tmov.u32 %r9, 0x0;\n\tmov.u32 %r10, 0x0;\n\tmov.u32 %r11, 0x0;\n\tmov.u32 %r12, 0x0;\n\t@%p1 ld.global.v4.b32 { %r9, %r10, %r11, %r12 }, [ %rd3 + 0 ];\n\t// end inline asm\n\tmov.b32 \t%f9, %r9;\n\tmov.b32 \t%f10, %r10;\n\tmov.b32 \t%f11, %r11;\n\tmov.b32 \t%f12, %r12;\n\t// begin inline asm\n\tmov.u32 %r13, 0x0;\n\tmov.u32 %r14, 0x0;\n\tmov.u32 %r15, 0x0;\n\tmov.u32 %r16, 0x0;\n\t@%p2 ld.global.v4.b32 { %r13, %r14, %r15, %r16 }, [ %rd4 + 0 ];\n\t// end inline asm\n\tmov.b32 \t%f13, %r13;\n\tmov.b32 \t%f14, %r14;\n\tmov.b32 \t%f15, %r15;\n\tmov.b32 \t%f16, %r16;\n\t.loc\t1 33 12                         // test_add.py:33:12\n\tadd.f32 \t%f17, %f1, %f9;\n\tadd.f32 \t%f18, %f2, %f10;\n\tadd.f32 \t%f19, %f3, %f11;\n\tadd.f32 \t%f20, %f4, %f12;\n\tadd.f32 \t%f21, %f5, %f13;\n\tadd.f32 \t%f22, %f6, %f14;\n\tadd.f32 \t%f23, %f7, %f15;\n\tadd.f32 \t%f24, %f8, %f16;\n\t.loc\t1 34 21                         // test_add.py:34:21\n\tadd.s64 \t%rd5, %rd9, %rd10;\n\tadd.s64 \t%rd6, %rd5, 2048;\n\t.loc\t1 34 30                         // test_add.py:34:30\n\tmov.b32 \t%r17, %f17;\n\tmov.b32 \t%r18, %f18;\n\tmov.b32 \t%r19, %f19;\n\tmov.b32 \t%r20, %f20;\n\t// begin inline asm\n\t@%p1 st.global.v4.b32 [ %rd5 + 0 ], { %r17, %r18, %r19, %r20 };\n\t// end inline asm\n\tmov.b32 \t%r21, %f21;\n\tmov.b32 \t%r22, %f22;\n\tmov.b32 \t%r23, %f23;\n\tmov.b32 \t%r24, %f24;\n\t// begin inline asm\n\t@%p2 st.global.v4.b32 [ %rd6 + 0 ], { %r21, %r22, %r23, %r24 };\n\t// end inline asm\n\t.loc\t1 34 4                          // test_add.py:34:4\n\tret;\n$L__tmp1:\n$L__func_end0:\n                                        // -- End function\n}\n\t.file\t1 \"/home/yhao/tritonparse/tests/test_add.py\"\n\t.section\t.debug_abbrev\n\t{\n.b8 1                                   // Abbreviation Code\n.b8 17                                  // DW_TAG_compile_unit\n.b8 0                                   // DW_CHILDREN_no\n.b8 37                                  // DW_AT_producer\n.b8 8                                   // DW_FORM_string\n.b8 19                                  // DW_AT_language\n.b8 5                                   // DW_FORM_data2\n.b8 3                                   // DW_AT_name\n.b8 8                                   // DW_FORM_string\n.b8 16                                  // DW_AT_stmt_list\n.b8 6                                   // DW_FORM_data4\n.b8 27                                  // DW_AT_comp_dir\n.b8 8                                   // DW_FORM_string\n.b8 0                                   // EOM(1)\n.b8 0                                   // EOM(2)\n.b8 0                                   // EOM(3)\n\t}\n\t.section\t.debug_info\n\t{\n.b32 62                                 // Length of Unit\n.b8 2                                   // DWARF version number\n.b8 0\n.b32 .debug_abbrev                      // Offset Into Abbrev. Section\n.b8 8                                   // Address Size (in bytes)\n.b8 1                                   // Abbrev [1] 0xb:0x37 DW_TAG_compile_unit\n.b8 116                                 // DW_AT_producer\n.b8 114\n.b8 105\n.b8 116\n.b8 111\n.b8 110\n.b8 0\n.b8 2                                   // DW_AT_language\n.b8 0\n.b8 116                                 // DW_AT_name\n.b8 101\n.b8 115\n.b8 116\n.b8 95\n.b8 97\n.b8 100\n.b8 100\n.b8 46\n.b8 112\n.b8 121\n.b8 0\n.b32 .debug_line                        // DW_AT_stmt_list\n.b8 47                                  // DW_AT_comp_dir\n.b8 104\n.b8 111\n.b8 109\n.b8 101\n.b8 47\n.b8 121\n.b8 104\n.b8 97\n.b8 111\n.b8 47\n.b8 116\n.b8 114\n.b8 105\n.b8 116\n.b8 111\n.b8 110\n.b8 112\n.b8 97\n.b8 114\n.b8 115\n.b8 101\n.b8 47\n.b8 116\n.b8 101\n.b8 115\n.b8 116\n.b8 115\n.b8 0\n\t}\n\t.section\t.debug_macinfo\t{\t}\n","add_kernel.json":"{\"hash\": \"686bd3a8d1c50f213c66a6b8352b9eee5dc9cbca74aca2e6f199d621e7853199\", \"target\": {\"backend\": \"cuda\", \"arch\": 90, \"warp_size\": 32}, \"num_warps\": 4, \"num_ctas\": 1, \"num_stages\": 3, \"maxnreg\": null, \"cluster_dims\": [1, 1, 1], \"ptx_version\": null, \"enable_fp_fusion\": true, \"launch_cooperative_grid\": false, \"launch_pdl\": false, \"supported_fp8_dtypes\": [\"fp8e4b15\", \"fp8e4nv\", \"fp8e5\"], \"deprecated_fp8_dtypes\": [\"fp8e4b15\"], \"default_dot_input_precision\": \"tf32\", \"allowed_dot_input_precisions\": [\"tf32\", \"tf32x3\", \"ieee\"], \"max_num_imprecise_acc_default\": 1073741824, \"extern_libs\": [[\"libdevice\", \"/home/yhao/p9b/triton/python/triton/backends/nvidia/lib/libdevice.10.bc\"]], \"debug\": false, \"backend_name\": \"cuda\", \"sanitize_overflow\": true, \"arch\": \"sm90\", \"triton_version\": \"3.3.0\", \"tensordesc_meta\": [], \"shared\": 0, \"tmem_size\": 0, \"global_scratch_size\": 0, \"global_scratch_align\": 1, \"name\": \"add_kernel\"}"},"python_source":{"file_path":"/home/yhao/tritonparse/tests/test_add.py","start_line":18,"end_line":35,"code":"@triton.jit\ndef add_kernel(\n    a_ptr,\n    b_ptr,\n    c_ptr,\n    n_elements,\n    BLOCK_SIZE: tl.constexpr,\n):\n    pid = tl.program_id(axis=0)\n    block_start = pid * BLOCK_SIZE\n    offsets = block_start + tl.arange(0, BLOCK_SIZE)\n    mask = offsets < n_elements\n\n    a = tl.load(a_ptr + offsets, mask=mask)\n    b = tl.load(b_ptr + offsets, mask=mask)\n    c = a + b\n    tl.store(c_ptr + offsets, c, mask=mask)\n"}}}
{"event_type":"compilation","pid":621033,"stack":[{"line":69,"name":"<module>","filename":"/home/yhao/tritonparse/tests/test_add.py","loc":"test_tensor_add()"},{"line":63,"name":"test_tensor_add","filename":"/home/yhao/tritonparse/tests/test_add.py","loc":"c_compiled = compiled_add(a, b)"},{"line":663,"name":"_fn","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/eval_frame.py","loc":"return fn(*args, **kwargs)"},{"line":1458,"name":"__call__","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py","loc":"return self._torchdynamo_orig_callable("},{"line":1237,"name":"__call__","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py","loc":"result = self._inner_convert("},{"line":624,"name":"__call__","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py","loc":"return _compile("},{"line":1082,"name":"_compile","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py","loc":"guarded_code = compile_inner(code, one_graph, hooks, transform)"},{"line":97,"name":"wrapper_function","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_utils_internal.py","loc":"return function(*args, **kwargs)"},{"line":777,"name":"compile_inner","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py","loc":"return _compile_inner(code, one_graph, hooks, transform)"},{"line":813,"name":"_compile_inner","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py","loc":"out_code = transform_code_object(code, transform)"},{"line":1422,"name":"transform_code_object","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/bytecode_transformation.py","loc":"transformations(instructions, code_options)"},{"line":264,"name":"_fn","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py","loc":"return fn(*args, **kwargs)"},{"line":741,"name":"transform","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/convert_frame.py","loc":"tracer.run()"},{"line":3494,"name":"run","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/symbolic_convert.py","loc":"super().run()"},{"line":1345,"name":"run","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/symbolic_convert.py","loc":"while self.step():"},{"line":1254,"name":"step","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/symbolic_convert.py","loc":"self.dispatch_table[inst.opcode](self, inst)"},{"line":3695,"name":"RETURN_VALUE","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/symbolic_convert.py","loc":"self._return(inst)"},{"line":3680,"name":"_return","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/symbolic_convert.py","loc":"self.output.compile_subgraph("},{"line":1246,"name":"compile_subgraph","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/output_graph.py","loc":"self.compile_and_call_fx_graph(tx, pass2.graph_output_vars(), root)"},{"line":1507,"name":"compile_and_call_fx_graph","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/output_graph.py","loc":"compiled_fn = self.call_user_compiler(gm)"},{"line":1561,"name":"call_user_compiler","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/output_graph.py","loc":"return self._call_user_compiler(gm)"},{"line":1593,"name":"_call_user_compiler","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/output_graph.py","loc":"compiled_fn = compiler_fn(gm, self.example_inputs())"},{"line":150,"name":"__call__","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/repro/after_dynamo.py","loc":"compiled_gm = compiler_fn(gm, example_inputs)"},{"line":2364,"name":"__call__","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/__init__.py","loc":"return compile_fx(model_, inputs_, config_patches=self.config)"},{"line":2317,"name":"compile_fx","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/compile_fx.py","loc":"return aot_autograd("},{"line":106,"name":"__call__","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/backends/common.py","loc":"cg = aot_module_simplified(gm, example_inputs, **self.kwargs)"},{"line":1179,"name":"aot_module_simplified","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_functorch/aot_autograd.py","loc":"compiled_fn = AOTAutogradCache.load("},{"line":923,"name":"load","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_functorch/_aot_autograd/autograd_cache.py","loc":"compiled_fn = dispatch_and_compile()"},{"line":1164,"name":"dispatch_and_compile","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_functorch/aot_autograd.py","loc":"compiled_fn, _ = create_aot_dispatcher_function("},{"line":576,"name":"create_aot_dispatcher_function","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_functorch/aot_autograd.py","loc":"return _create_aot_dispatcher_function("},{"line":826,"name":"_create_aot_dispatcher_function","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_functorch/aot_autograd.py","loc":"compiled_fn, fw_metadata = compiler_fn("},{"line":243,"name":"aot_dispatch_base","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_functorch/_aot_autograd/jit_compile_runtime_wrappers.py","loc":"compiled_fw = compiler(fw_module, updated_flat_args)"},{"line":483,"name":"__call__","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_functorch/aot_autograd.py","loc":"return self.compiler_fn(gm, example_inputs)"},{"line":2153,"name":"fw_compiler_base","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/compile_fx.py","loc":"return inner_compile("},{"line":710,"name":"compile_fx_inner","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/compile_fx.py","loc":"return wrap_compiler_debug(_compile_fx_inner, compiler_name=\"inductor\")("},{"line":124,"name":"debug_wrapper","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_dynamo/repro/after_aot.py","loc":"inner_compiled_fn = compiler_fn(gm, example_inputs)"},{"line":853,"name":"_compile_fx_inner","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/compile_fx.py","loc":"mb_compiled_graph = fx_codegen_and_compile("},{"line":1487,"name":"fx_codegen_and_compile","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/compile_fx.py","loc":"return scheme.codegen_and_compile(gm, example_inputs, inputs_to_check, graph_kwargs)"},{"line":1374,"name":"codegen_and_compile","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/compile_fx.py","loc":"compiled_module = graph.compile_to_module()"},{"line":2233,"name":"compile_to_module","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/graph.py","loc":"return self._compile_to_module()"},{"line":2243,"name":"_compile_to_module","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/graph.py","loc":"mod = self._compile_to_module_lines(wrapper_code)"},{"line":2307,"name":"_compile_to_module_lines","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/graph.py","loc":"mod = PyCodeCache.load_by_key_path("},{"line":3022,"name":"load_by_key_path","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/codecache.py","loc":"mod = _reload_python_module(key, path, set_sys_modules=in_toplevel)"},{"line":31,"name":"_reload_python_module","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/runtime/compile_tasks.py","loc":"exec(code, mod.__dict__, mod.__dict__)"},{"line":43,"name":"<module>","filename":"/tmp/torchinductor_yhao/2u/c2ufpflbfdw7hhqs3nwwv47p7v4aiqdnfjcfmekb2fw23m62aes2.py","loc":"triton_poi_fused_add_0 = async_compile.triton('triton_poi_fused_add_0', '''"},{"line":396,"name":"triton","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/async_compile.py","loc":"kernel.precompile("},{"line":322,"name":"precompile","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/runtime/triton_heuristics.py","loc":"self._precompile_worker()"},{"line":344,"name":"_precompile_worker","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/runtime/triton_heuristics.py","loc":"compile_results.append(self._precompile_config(c))"},{"line":627,"name":"_precompile_config","filename":"/home/yhao/miniconda3/envs/ptb/lib/python3.11/site-packages/torch/_inductor/runtime/triton_heuristics.py","loc":"binary = triton.compile(*compile_args, **compile_kwargs)"},{"line":385,"name":"compile","filename":"/home/yhao/p9b/triton/python/triton/compiler/compiler.py","loc":"compilation_listener(src=src, metadata=metadata, metadata_group=metadata_group, times=timer.end(),"},{"line":547,"name":"maybe_trace_triton","filename":"/home/yhao/tritonparse/tritonparse/structured_logging.py","loc":"trace_structured_triton("},{"line":467,"name":"trace_structured_triton","filename":"/home/yhao/tritonparse/tritonparse/structured_logging.py","loc":"metadata_dict[\"stack\"] = get_stack_trace()"}],"timestamp":"2025-05-09T13:29:45.%fZ","payload":{"metadata":{"cache_hit":false,"hash":"79725cf1fc4ef607f8ac096bf29d9ffc6af733c8627ec7638d2c1860775d3b53","target":{"backend":"cuda","arch":90,"warp_size":32},"num_warps":4,"num_ctas":1,"num_stages":1,"maxnreg":null,"cluster_dims":[1,1,1],"ptx_version":null,"enable_fp_fusion":true,"launch_cooperative_grid":false,"launch_pdl":false,"supported_fp8_dtypes":["fp8e4b15","fp8e4nv","fp8e5"],"deprecated_fp8_dtypes":["fp8e4b15"],"default_dot_input_precision":"tf32","allowed_dot_input_precisions":["tf32","tf32x3","ieee"],"max_num_imprecise_acc_default":1073741824,"extern_libs":[["libdevice","/home/yhao/p9b/triton/python/triton/backends/nvidia/lib/libdevice.10.bc"]],"debug":true,"backend_name":"cuda","sanitize_overflow":false,"arch":"sm90","triton_version":"3.3.0","tensordesc_meta":[],"shared":0,"tmem_size":0,"global_scratch_size":0,"global_scratch_align":1,"name":"triton_poi_fused_add_0"},"pt_info":{"frame_id":0,"frame_compile_id":0,"attempt":0},"file_path":{"triton_poi_fused_add_0.ttir":"/tmp/torchinductor_yhao/triton/0/PFZFZ4P4J33AP6FMBFV7FHM77RVPOM6IMJ7MOY4NFQMGA525HNJQ/triton_poi_fused_add_0.ttir","triton_poi_fused_add_0.ttgir":"/tmp/torchinductor_yhao/triton/0/PFZFZ4P4J33AP6FMBFV7FHM77RVPOM6IMJ7MOY4NFQMGA525HNJQ/triton_poi_fused_add_0.ttgir","triton_poi_fused_add_0.llir":"/tmp/torchinductor_yhao/triton/0/PFZFZ4P4J33AP6FMBFV7FHM77RVPOM6IMJ7MOY4NFQMGA525HNJQ/triton_poi_fused_add_0.llir","triton_poi_fused_add_0.ptx":"/tmp/torchinductor_yhao/triton/0/PFZFZ4P4J33AP6FMBFV7FHM77RVPOM6IMJ7MOY4NFQMGA525HNJQ/triton_poi_fused_add_0.ptx","triton_poi_fused_add_0.cubin":"/tmp/torchinductor_yhao/triton/0/PFZFZ4P4J33AP6FMBFV7FHM77RVPOM6IMJ7MOY4NFQMGA525HNJQ/triton_poi_fused_add_0.cubin","triton_poi_fused_add_0.json":"/tmp/torchinductor_yhao/triton/0/PFZFZ4P4J33AP6FMBFV7FHM77RVPOM6IMJ7MOY4NFQMGA525HNJQ/triton_poi_fused_add_0.json"},"file_content":{"triton_poi_fused_add_0.ttir":"#loc = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":18:0)\nmodule {\n  tt.func public @triton_poi_fused_add_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":18:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":18:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":18:0), %arg3: i32 {tt.divisibility = 16 : i32} loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":18:0)) attributes {noinline = false} {\n    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)\n    %0 = tt.get_program_id x : i32 loc(#loc2)\n    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)\n    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc4)\n    %3 = tt.splat %1 : i32 -> tensor<1024xi32> loc(#loc5)\n    %4 = arith.addi %3, %2 : tensor<1024xi32> loc(#loc5)\n    %5 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc6)\n    %6 = tt.addptr %5, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc6)\n    %7 = tt.load %6 : tensor<1024x!tt.ptr<f32>> loc(#loc7)\n    %8 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc8)\n    %9 = tt.addptr %8, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc8)\n    %10 = tt.load %9 : tensor<1024x!tt.ptr<f32>> loc(#loc9)\n    %11 = arith.addf %7, %10 : tensor<1024xf32> loc(#loc10)\n    %12 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>> loc(#loc11)\n    %13 = tt.addptr %12, %4 : tensor<1024x!tt.ptr<f32>>, tensor<1024xi32> loc(#loc11)\n    tt.store %13, %11 : tensor<1024x!tt.ptr<f32>> loc(#loc12)\n    tt.return loc(#loc13)\n  } loc(#loc)\n} loc(#loc)\n#loc1 = loc(unknown)\n#loc2 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":20:28)\n#loc3 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":20:33)\n#loc4 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":21:36)\n#loc5 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":21:23)\n#loc6 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":24:30)\n#loc7 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":24:35)\n#loc8 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":25:30)\n#loc9 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":25:35)\n#loc10 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":26:18)\n#loc11 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":27:25)\n#loc12 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":27:36)\n#loc13 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":27:4)\n","triton_poi_fused_add_0.ttgir":"#blocked = #ttg.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>\n#loc = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":18:0)\nmodule attributes {\"ttg.num-ctas\" = 1 : i32, \"ttg.num-warps\" = 4 : i32, ttg.target = \"cuda:90\", \"ttg.threads-per-warp\" = 32 : i32} {\n  tt.func public @triton_poi_fused_add_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":18:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":18:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":18:0), %arg3: i32 {tt.divisibility = 16 : i32} loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":18:0)) attributes {noinline = false} {\n    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)\n    %0 = tt.get_program_id x : i32 loc(#loc2)\n    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)\n    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)\n    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)\n    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)\n    %5 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc6)\n    %6 = tt.addptr %5, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc6)\n    %7 = tt.load %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)\n    %8 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)\n    %9 = tt.addptr %8, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc8)\n    %10 = tt.load %9 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc9)\n    %11 = arith.addf %7, %10 : tensor<1024xf32, #blocked> loc(#loc10)\n    %12 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc11)\n    %13 = tt.addptr %12, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc11)\n    tt.store %13, %11 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)\n    tt.return loc(#loc13)\n  } loc(#loc)\n} loc(#loc)\n#loc1 = loc(unknown)\n#loc2 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":20:28)\n#loc3 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":20:33)\n#loc4 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":21:36)\n#loc5 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":21:23)\n#loc6 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":24:30)\n#loc7 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":24:35)\n#loc8 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":25:30)\n#loc9 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":25:35)\n#loc10 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":26:18)\n#loc11 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":27:25)\n#loc12 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":27:36)\n#loc13 = loc(\"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\":27:4)\n","triton_poi_fused_add_0.llir":"; ModuleID = 'LLVMDialectModule'\nsource_filename = \"LLVMDialectModule\"\ntarget datalayout = \"e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64\"\n\ndefine ptx_kernel void @triton_poi_fused_add_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {\n  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8\n  %7 = shl i32 %6, 10, !dbg !9\n  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10\n  %9 = shl i32 %8, 2, !dbg !10\n  %10 = and i32 %9, 508, !dbg !10\n  %11 = or disjoint i32 %10, %7, !dbg !11\n  %12 = or disjoint i32 %11, 512, !dbg !11\n  %13 = sext i32 %11 to i64, !dbg !12\n  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !12\n  %15 = sext i32 %12 to i64, !dbg !12\n  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !12\n  %17 = tail call { i32, i32, i32, i32 } asm sideeffect \"mov.u32 $0, 0x0;\\0A\\09mov.u32 $1, 0x0;\\0A\\09mov.u32 $2, 0x0;\\0A\\09mov.u32 $3, 0x0;\\0A\\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\", \"=r,=r,=r,=r,l\"(ptr addrspace(1) %14) #2, !dbg !13\n  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !13\n  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !13\n  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !13\n  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !13\n  %22 = bitcast i32 %18 to float, !dbg !13\n  %23 = bitcast i32 %19 to float, !dbg !13\n  %24 = bitcast i32 %20 to float, !dbg !13\n  %25 = bitcast i32 %21 to float, !dbg !13\n  %26 = tail call { i32, i32, i32, i32 } asm sideeffect \"mov.u32 $0, 0x0;\\0A\\09mov.u32 $1, 0x0;\\0A\\09mov.u32 $2, 0x0;\\0A\\09mov.u32 $3, 0x0;\\0A\\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\", \"=r,=r,=r,=r,l\"(ptr addrspace(1) %16) #2, !dbg !13\n  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !13\n  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !13\n  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !13\n  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !13\n  %31 = bitcast i32 %27 to float, !dbg !13\n  %32 = bitcast i32 %28 to float, !dbg !13\n  %33 = bitcast i32 %29 to float, !dbg !13\n  %34 = bitcast i32 %30 to float, !dbg !13\n  %35 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !14\n  %36 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !14\n  %37 = tail call { i32, i32, i32, i32 } asm sideeffect \"mov.u32 $0, 0x0;\\0A\\09mov.u32 $1, 0x0;\\0A\\09mov.u32 $2, 0x0;\\0A\\09mov.u32 $3, 0x0;\\0A\\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\", \"=r,=r,=r,=r,l\"(ptr addrspace(1) %35) #2, !dbg !15\n  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !15\n  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !15\n  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !15\n  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !15\n  %42 = bitcast i32 %38 to float, !dbg !15\n  %43 = bitcast i32 %39 to float, !dbg !15\n  %44 = bitcast i32 %40 to float, !dbg !15\n  %45 = bitcast i32 %41 to float, !dbg !15\n  %46 = tail call { i32, i32, i32, i32 } asm sideeffect \"mov.u32 $0, 0x0;\\0A\\09mov.u32 $1, 0x0;\\0A\\09mov.u32 $2, 0x0;\\0A\\09mov.u32 $3, 0x0;\\0A\\09ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\", \"=r,=r,=r,=r,l\"(ptr addrspace(1) %36) #2, !dbg !15\n  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !15\n  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !15\n  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !15\n  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !15\n  %51 = bitcast i32 %47 to float, !dbg !15\n  %52 = bitcast i32 %48 to float, !dbg !15\n  %53 = bitcast i32 %49 to float, !dbg !15\n  %54 = bitcast i32 %50 to float, !dbg !15\n  %55 = fadd float %22, %42, !dbg !16\n  %56 = fadd float %23, %43, !dbg !16\n  %57 = fadd float %24, %44, !dbg !16\n  %58 = fadd float %25, %45, !dbg !16\n  %59 = fadd float %31, %51, !dbg !16\n  %60 = fadd float %32, %52, !dbg !16\n  %61 = fadd float %33, %53, !dbg !16\n  %62 = fadd float %34, %54, !dbg !16\n  %63 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !17\n  %64 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !17\n  %65 = bitcast float %55 to i32, !dbg !18\n  %66 = bitcast float %56 to i32, !dbg !18\n  %67 = bitcast float %57 to i32, !dbg !18\n  %68 = bitcast float %58 to i32, !dbg !18\n  tail call void asm sideeffect \"st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };\", \"r,r,r,r,l\"(i32 %65, i32 %66, i32 %67, i32 %68, ptr addrspace(1) %63) #2, !dbg !18\n  %69 = bitcast float %59 to i32, !dbg !18\n  %70 = bitcast float %60 to i32, !dbg !18\n  %71 = bitcast float %61 to i32, !dbg !18\n  %72 = bitcast float %62 to i32, !dbg !18\n  tail call void asm sideeffect \"st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };\", \"r,r,r,r,l\"(i32 %69, i32 %70, i32 %71, i32 %72, ptr addrspace(1) %64) #2, !dbg !18\n  ret void, !dbg !19\n}\n\n; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1\n\n; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)\ndeclare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1\n\nattributes #0 = { \"nvvm.reqntid\"=\"128\" }\nattributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }\nattributes #2 = { nounwind }\n\n!llvm.dbg.cu = !{!0}\n!llvm.module.flags = !{!2, !3}\n!llvm.ident = !{!4}\n\n!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: \"triton\", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)\n!1 = !DIFile(filename: \"c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\", directory: \"/tmp/torchinductor_yhao/5g\")\n!2 = !{i32 2, !\"Debug Info Version\", i32 3}\n!3 = !{i32 4, !\"nvvm-reflect-ftz\", i32 1}\n!4 = !{!\"clang version 3.8.0 (tags/RELEASE_380/final)\"}\n!5 = distinct !DISubprogram(name: \"triton_poi_fused_add_0\", linkageName: \"triton_poi_fused_add_0\", scope: !1, file: !1, line: 18, type: !6, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)\n!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)\n!7 = !{}\n!8 = !DILocation(line: 20, column: 28, scope: !5)\n!9 = !DILocation(line: 20, column: 33, scope: !5)\n!10 = !DILocation(line: 21, column: 36, scope: !5)\n!11 = !DILocation(line: 21, column: 23, scope: !5)\n!12 = !DILocation(line: 24, column: 30, scope: !5)\n!13 = !DILocation(line: 24, column: 35, scope: !5)\n!14 = !DILocation(line: 25, column: 30, scope: !5)\n!15 = !DILocation(line: 25, column: 35, scope: !5)\n!16 = !DILocation(line: 26, column: 18, scope: !5)\n!17 = !DILocation(line: 27, column: 25, scope: !5)\n!18 = !DILocation(line: 27, column: 36, scope: !5)\n!19 = !DILocation(line: 27, column: 4, scope: !5)\n","triton_poi_fused_add_0.ptx":"//\n// Generated by LLVM NVPTX Back-End\n//\n\n.version 8.7\n.target sm_90a\n.address_size 64\n\n\t// .globl\ttriton_poi_fused_add_0  // -- Begin function triton_poi_fused_add_0\n                                        // @triton_poi_fused_add_0\n.visible .entry triton_poi_fused_add_0(\n\t.param .u64 .ptr .global .align 1 triton_poi_fused_add_0_param_0,\n\t.param .u64 .ptr .global .align 1 triton_poi_fused_add_0_param_1,\n\t.param .u64 .ptr .global .align 1 triton_poi_fused_add_0_param_2,\n\t.param .u32 triton_poi_fused_add_0_param_3,\n\t.param .u64 .ptr .global .align 1 triton_poi_fused_add_0_param_4\n)\n.reqntid 128\n{\n\t.reg .b32 \t%r<31>;\n\t.reg .f32 \t%f<25>;\n\t.reg .b64 \t%rd<11>;\n\t.loc\t1 18 0                          // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:18:0\n$L__func_begin0:\n\t.loc\t1 18 0                          // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:18:0\n\n// %bb.0:\n\tld.param.u64 \t%rd7, [triton_poi_fused_add_0_param_0];\n\tld.param.u64 \t%rd8, [triton_poi_fused_add_0_param_1];\n$L__tmp0:\n\t.loc\t1 20 28                         // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:20:28\n\tmov.u32 \t%r25, %ctaid.x;\n\t.loc\t1 20 33                         // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:20:33\n\tshl.b32 \t%r26, %r25, 10;\n\tld.param.u64 \t%rd9, [triton_poi_fused_add_0_param_2];\n\t.loc\t1 21 36                         // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:21:36\n\tmov.u32 \t%r27, %tid.x;\n\tshl.b32 \t%r28, %r27, 2;\n\tand.b32  \t%r29, %r28, 508;\n\t.loc\t1 21 23                         // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:21:23\n\tor.b32  \t%r30, %r29, %r26;\n\t.loc\t1 24 30                         // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:24:30\n\tmul.wide.s32 \t%rd10, %r30, 4;\n\tadd.s64 \t%rd1, %rd7, %rd10;\n\tadd.s64 \t%rd2, %rd1, 2048;\n\t.loc\t1 24 35                         // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:24:35\n\t// begin inline asm\n\tmov.u32 %r1, 0x0;\n\tmov.u32 %r2, 0x0;\n\tmov.u32 %r3, 0x0;\n\tmov.u32 %r4, 0x0;\n\tld.global.v4.b32 { %r1, %r2, %r3, %r4 }, [ %rd1 + 0 ];\n\t// end inline asm\n\tmov.b32 \t%f1, %r1;\n\tmov.b32 \t%f2, %r2;\n\tmov.b32 \t%f3, %r3;\n\tmov.b32 \t%f4, %r4;\n\t// begin inline asm\n\tmov.u32 %r5, 0x0;\n\tmov.u32 %r6, 0x0;\n\tmov.u32 %r7, 0x0;\n\tmov.u32 %r8, 0x0;\n\tld.global.v4.b32 { %r5, %r6, %r7, %r8 }, [ %rd2 + 0 ];\n\t// end inline asm\n\tmov.b32 \t%f5, %r5;\n\tmov.b32 \t%f6, %r6;\n\tmov.b32 \t%f7, %r7;\n\tmov.b32 \t%f8, %r8;\n\t.loc\t1 25 30                         // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:25:30\n\tadd.s64 \t%rd3, %rd8, %rd10;\n\tadd.s64 \t%rd4, %rd3, 2048;\n\t.loc\t1 25 35                         // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:25:35\n\t// begin inline asm\n\tmov.u32 %r9, 0x0;\n\tmov.u32 %r10, 0x0;\n\tmov.u32 %r11, 0x0;\n\tmov.u32 %r12, 0x0;\n\tld.global.v4.b32 { %r9, %r10, %r11, %r12 }, [ %rd3 + 0 ];\n\t// end inline asm\n\tmov.b32 \t%f9, %r9;\n\tmov.b32 \t%f10, %r10;\n\tmov.b32 \t%f11, %r11;\n\tmov.b32 \t%f12, %r12;\n\t// begin inline asm\n\tmov.u32 %r13, 0x0;\n\tmov.u32 %r14, 0x0;\n\tmov.u32 %r15, 0x0;\n\tmov.u32 %r16, 0x0;\n\tld.global.v4.b32 { %r13, %r14, %r15, %r16 }, [ %rd4 + 0 ];\n\t// end inline asm\n\tmov.b32 \t%f13, %r13;\n\tmov.b32 \t%f14, %r14;\n\tmov.b32 \t%f15, %r15;\n\tmov.b32 \t%f16, %r16;\n\t.loc\t1 26 18                         // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:26:18\n\tadd.f32 \t%f17, %f1, %f9;\n\tadd.f32 \t%f18, %f2, %f10;\n\tadd.f32 \t%f19, %f3, %f11;\n\tadd.f32 \t%f20, %f4, %f12;\n\tadd.f32 \t%f21, %f5, %f13;\n\tadd.f32 \t%f22, %f6, %f14;\n\tadd.f32 \t%f23, %f7, %f15;\n\tadd.f32 \t%f24, %f8, %f16;\n\t.loc\t1 27 25                         // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:27:25\n\tadd.s64 \t%rd5, %rd9, %rd10;\n\tadd.s64 \t%rd6, %rd5, 2048;\n\t.loc\t1 27 36                         // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:27:36\n\tmov.b32 \t%r17, %f17;\n\tmov.b32 \t%r18, %f18;\n\tmov.b32 \t%r19, %f19;\n\tmov.b32 \t%r20, %f20;\n\t// begin inline asm\n\tst.global.v4.b32 [ %rd5 + 0 ], { %r17, %r18, %r19, %r20 };\n\t// end inline asm\n\tmov.b32 \t%r21, %f21;\n\tmov.b32 \t%r22, %f22;\n\tmov.b32 \t%r23, %f23;\n\tmov.b32 \t%r24, %f24;\n\t// begin inline asm\n\tst.global.v4.b32 [ %rd6 + 0 ], { %r21, %r22, %r23, %r24 };\n\t// end inline asm\n\t.loc\t1 27 4                          // c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py:27:4\n\tret;\n$L__tmp1:\n$L__func_end0:\n                                        // -- End function\n}\n\t.file\t1 \"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py\"\n\t.section\t.debug_abbrev\n\t{\n.b8 1                                   // Abbreviation Code\n.b8 17                                  // DW_TAG_compile_unit\n.b8 0                                   // DW_CHILDREN_no\n.b8 37                                  // DW_AT_producer\n.b8 8                                   // DW_FORM_string\n.b8 19                                  // DW_AT_language\n.b8 5                                   // DW_FORM_data2\n.b8 3                                   // DW_AT_name\n.b8 8                                   // DW_FORM_string\n.b8 16                                  // DW_AT_stmt_list\n.b8 6                                   // DW_FORM_data4\n.b8 27                                  // DW_AT_comp_dir\n.b8 8                                   // DW_FORM_string\n.b8 0                                   // EOM(1)\n.b8 0                                   // EOM(2)\n.b8 0                                   // EOM(3)\n\t}\n\t.section\t.debug_info\n\t{\n.b32 104                                // Length of Unit\n.b8 2                                   // DWARF version number\n.b8 0\n.b32 .debug_abbrev                      // Offset Into Abbrev. Section\n.b8 8                                   // Address Size (in bytes)\n.b8 1                                   // Abbrev [1] 0xb:0x61 DW_TAG_compile_unit\n.b8 116                                 // DW_AT_producer\n.b8 114\n.b8 105\n.b8 116\n.b8 111\n.b8 110\n.b8 0\n.b8 2                                   // DW_AT_language\n.b8 0\n.b8 99                                  // DW_AT_name\n.b8 53\n.b8 103\n.b8 108\n.b8 53\n.b8 53\n.b8 112\n.b8 104\n.b8 111\n.b8 115\n.b8 106\n.b8 105\n.b8 99\n.b8 106\n.b8 107\n.b8 117\n.b8 55\n.b8 114\n.b8 114\n.b8 55\n.b8 99\n.b8 100\n.b8 117\n.b8 122\n.b8 121\n.b8 101\n.b8 101\n.b8 119\n.b8 118\n.b8 99\n.b8 109\n.b8 51\n.b8 113\n.b8 54\n.b8 117\n.b8 106\n.b8 106\n.b8 113\n.b8 101\n.b8 55\n.b8 108\n.b8 55\n.b8 108\n.b8 100\n.b8 109\n.b8 53\n.b8 101\n.b8 101\n.b8 119\n.b8 109\n.b8 117\n.b8 107\n.b8 46\n.b8 112\n.b8 121\n.b8 0\n.b32 .debug_line                        // DW_AT_stmt_list\n.b8 47                                  // DW_AT_comp_dir\n.b8 116\n.b8 109\n.b8 112\n.b8 47\n.b8 116\n.b8 111\n.b8 114\n.b8 99\n.b8 104\n.b8 105\n.b8 110\n.b8 100\n.b8 117\n.b8 99\n.b8 116\n.b8 111\n.b8 114\n.b8 95\n.b8 121\n.b8 104\n.b8 97\n.b8 111\n.b8 47\n.b8 53\n.b8 103\n.b8 0\n\t}\n\t.section\t.debug_macinfo\t{\t}\n","triton_poi_fused_add_0.json":"{\"hash\": \"79725cf1fc4ef607f8ac096bf29d9ffc6af733c8627ec7638d2c1860775d3b53\", \"target\": {\"backend\": \"cuda\", \"arch\": 90, \"warp_size\": 32}, \"num_warps\": 4, \"num_ctas\": 1, \"num_stages\": 1, \"maxnreg\": null, \"cluster_dims\": [1, 1, 1], \"ptx_version\": null, \"enable_fp_fusion\": true, \"launch_cooperative_grid\": false, \"launch_pdl\": false, \"supported_fp8_dtypes\": [\"fp8e4b15\", \"fp8e4nv\", \"fp8e5\"], \"deprecated_fp8_dtypes\": [\"fp8e4b15\"], \"default_dot_input_precision\": \"tf32\", \"allowed_dot_input_precisions\": [\"tf32\", \"tf32x3\", \"ieee\"], \"max_num_imprecise_acc_default\": 1073741824, \"extern_libs\": [[\"libdevice\", \"/home/yhao/p9b/triton/python/triton/backends/nvidia/lib/libdevice.10.bc\"]], \"debug\": true, \"backend_name\": \"cuda\", \"sanitize_overflow\": false, \"arch\": \"sm90\", \"triton_version\": \"3.3.0\", \"tensordesc_meta\": [], \"shared\": 0, \"tmem_size\": 0, \"global_scratch_size\": 0, \"global_scratch_align\": 1, \"name\": \"triton_poi_fused_add_0\"}"},"python_source":{"file_path":"/tmp/torchinductor_yhao/5g/c5gl55phosjicjku7rr7cduzyeewvcm3q6ujjqe7l7ldm5eewmuk.py","start_line":10,"end_line":28,"code":"@triton_heuristics.pointwise(\n    size_hints={'x': 1048576}, \n    filename=__file__,\n    triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'XBLOCK': 'constexpr'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [{(0,): [['tt.divisibility', 16]], (1,): [['tt.divisibility', 16]], (2,): [['tt.divisibility', 16]], (3,): [['tt.divisibility', 16]]}]},\n    inductor_meta={'grid_type': 'Grid1D', 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': '3F1692C8967118FCDFAE436F2DCCF205FA70A71A3CE42F5CA0FE5D0E790E8311', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},\n    min_elem_per_thread=0\n)\n@triton.jit\ndef triton_poi_fused_add_0(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):\n    xnumel = 1048576\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    xmask = tl.full([XBLOCK], True, tl.int1)\n    x0 = xindex\n    tmp0 = tl.load(in_ptr0 + (x0), None)\n    tmp1 = tl.load(in_ptr1 + (x0), None)\n    tmp2 = tmp0 + tmp1\n    tl.store(out_ptr0 + (x0), tmp2, None)\n"}}}
